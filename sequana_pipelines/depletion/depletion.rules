#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Dev Team (https://sequana.readthedocs.io)
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  Website:       https://github.com/sequana/sequana
#  Documentation: http://sequana.readthedocs.io
#  Contributors:  https://github.com/sequana/sequana/graphs/contributors
##############################################################################
import os

os.makedirs("tmp", exist_ok=True)

from sequana_pipetools import snaketools as sm

# This must be defined before the include
configfile: "config.yaml"

sequana_wrapper_branch = "main"

# A convenient manager
manager = sm.PipelineManager("depletion", config)

def get_samtools_options():

    samtools_options = {
    "selection": {
        # Keep reads mapped in proper pair
        "paired": "-f2",
        # Discard unmapped reads
        "single": "-F4"},
    "depletion": {
        # Keep reads when unmapped and mate unmapped
        "paired": "-f12",
        # Keep reads unmapped
        "single": "-f4"}}

    mode = config["general"]["mode"]
    paired = "paired" if manager.paired else "single"

    return samtools_options[mode][paired]

def set_output():
    if manager.paired:
        expected_output = expand("{sample}/{sample}_filtered_1.fastq.gz", sample=manager.samples)
        expected_output += expand("{sample}/{sample}_filtered_2.fastq.gz", sample=manager.samples)
    else:
        expected_output = expand("{sample}/{sample}_filtered.fastq.gz", sample=manager.samples)
    return expected_output

def set_bioconvert_output():
    if manager.paired:
        return ["{sample}/{sample}_filtered_1.fastq.gz", "{sample}/{sample}_filtered_2.fastq.gz"]
    else:
        return "{sample}/{sample}_filtered.fastq.gz"

rule all:
    input:
        set_output()


rule index:
    input:
        config['general']['reference']
    output: 
        bwa_bwt = config['general']['reference'] + ".bwt",
        fai = config['general']['reference'] + ".fai"
    params:
        options="",
        index_algorithm = config['bwa']['index_algorithm']
    threads: config['bwa']['threads']
    container:
        "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
    wrapper:
        f"{sequana_wrapper_branch}/wrappers/bwa/build"

rule bwa:
    input:
        fastq = manager.getrawdata(),
        bwa_bwt = config['general']['reference']+".bwt",
        reference = config["general"]["reference"],
        #fai = config['general']['reference']+".fai"
    output:
        sorted="{sample}/{sample}.sorted.bam",
    log:
        "{sample}/{sample}.log"
    threads: config["bwa"]["threads"]
    params:
        options = config["bwa"]["options"],
        tmp_directory = config["bwa"]["tmp_directory"]
    container:
        "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
    wrapper:
        f"{sequana_wrapper_branch}/wrappers/bwa/align"

rule samtools:
    input:
        bam = "{sample}/{sample}.sorted.bam",
    output:
        bam = "{sample}/{sample}.sorted.filtered.bam"
    log:
    threads: config["samtools"]["threads"]
    params:
        options=get_samtools_options(),
    container:
        "https://zenodo.org/record/6794508/files/sequana_tools_0.14.1.img"
    shell:
        """
        samtools view -b {params.options} -F 256 {input.bam} > {output.bam}
        """

rule bam_to_fastq:
    input:
        bam = "{sample}/{sample}.sorted.filtered.bam"
    output:
        set_bioconvert_output()
    container:
        "https://zenodo.org/record/7470179/files/bioconvert_0.6.2.img"
    shell:
        """
        bioconvert bam2fastq {input.bam} {wildcards.sample}/{wildcards.sample}_filtered.fastq.gz --force
        """

#sequana_multiqc_input = []
#include: sm.modules['multiqc/2.0']


# Those rules takes a couple of seconds so no need for a cluster
#localrules: multiqc


onsuccess:
    shell("chmod -R g+w .")

    import colorlog
    log = colorlog.getLogger("sequana.depletion")
    log.setLevel("INFO")

    manager.teardown()
    print("Once done, please clean up the directory using\n'make clean'")

onerror:
    from sequana_pipetools.errors import PipeError
    p = PipeError("depletion")
    p.status()
